import numpy as np
from sympy import symbols
from sympy import integrate

from coordinates import CartesianCoordinate


class Line2D():
    """A 2-Dimensional line"""
    def __init__(self,
                 point_A: CartesianCoordinate,
                 point_B: CartesianCoordinate):
        """Constructor
        
        Arguments:
        point_A: Cartesian Coordinate for point A
        point_B: Cartesian Coordinate for point B
        """
        self.point_A = point_A
        self.point_B = point_B
    
    def get_line_equation(self):
        """Returns a callable f(x): the line equation that connects point_A to
        point_B
        """
        if self.point_B.x - self.point_A.x == 0: # line parallel to the y axis
            return None
        else:
            slope = (self.point_B.y - self.point_A.y) /\
                    (self.point_B.x - self.point_A.x)
            linear_constant = -slope*self.point_A.x + self.point_A.y
            x = symbols('x')
            return slope*x + linear_constant        

class Triangle():
    """A triangle in a 3D Cartesian Coordinates System"""
    def __init__(self,
                 point_A: CartesianCoordinate,
                 point_B: CartesianCoordinate,
                 point_C: CartesianCoordinate):
        self.point_A = point_A
        self.point_B = point_B
        self.point_C = point_C

    def get_plane_equation(self):
        """
        Returns the plane equation constants for the plane that contains points
        A, B and C.
        Plane equation: a*(x-xo) + b*(y-yo) + c*(z-zo) = 0
        """
        vector_AB = self.point_B - self.point_A
        vector_BC = self.point_C - self.point_B
        normal_vector = np.cross(vector_AB, vector_BC)
        a = normal_vector[0]
        b = normal_vector[1]
        c = normal_vector[2]
        xo = self.point_A.x
        yo = self.point_A.y
        zo = self.point_A.z
        x, y = symbols('x y')
        return ((-a*(x-xo)-b*(y-yo))/c)+zo

    def get_volume(self):
        """
        Returns the volume from the polyhedron generated by triangle ABC and 
        the XY plane
        """
        plane = self.get_plane_equation()
        # Define how to compute a double integral
        def compute_double_integral(outer_boundary_from,
                                    outer_boundary_to,
                                    line_from_equation,
                                    line_to_equation):
            if ((line_from_equation is None) or (line_to_equation is None)):
                return 0.0, 0.0 # vertical line
            x, y = symbols('x y')
            volume =  integrate(plane,
                                (y, line_from_equation, line_to_equation),
                                (x, outer_boundary_from, outer_boundary_to))
            return volume

        # Instantiate lines
        lineAB = Line2D(self.point_A, self.point_B)
        lineBC = Line2D(self.point_B, self.point_C)
        lineAC = Line2D(self.point_A, self.point_C)

        # Compute double integral 1:
        volume1 = compute_double_integral(self.point_A.x,
                                          self.point_B.x,
                                          lineAB.get_line_equation(),
                                          lineAC.get_line_equation())
        # Compute double integral 2:
        volume2 = compute_double_integral(self.point_B.x,
                                          self.point_C.x,
                                          lineBC.get_line_equation(),
                                          lineAC.get_line_equation())

        # Sum and return
        total_volume = abs(volume1) + abs(volume2)
        return total_volume

class TriangularMesh():

    def __init__(self, point_cloud):
        """
        Arguments:
        point_cloud: a pandas dataframe containing x, y, z, elevation
        """
        # This is where we'll say hi to our old friend Delaunay
        pass