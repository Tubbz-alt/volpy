import numpy as np
from scipy import integrate

from coordinates import CartesianCoordinate


class Line2D():
    """A 2-Dimensional line"""
    def __init__(self,
                 point_A: CartesianCoordinate,
                 point_B: CartesianCoordinate):
        """Constructor
        
        Arguments:
        point_A: Cartesian Coordinate for point A
        point_B: Cartesian Coordinate for point B
        """
        self.point_A = point_A
        self.point_B = point_B
    
    def get_line_equation(self):
        """Returns a callable f(x): the line equation that connects point_A to
        point_B
        """
        if self.point_B.x - self.point_A.x == 0: # line parallel to the y axis
            return None
        else:
            slope = (self.point_B.y - self.point_A.y) /\
                    (self.point_B.x - self.point_A.x)
            linear_constant = -slope*self.point_A.x + self.point_A.y
            def line(x):
                return slope*x + linear_constant
            return line
        

class Triangle():
    """A triangle in a 3D Cartesian Coordinates System"""
    def __init__(self,
                 point_A: CartesianCoordinate,
                 point_B: CartesianCoordinate,
                 point_C: CartesianCoordinate):
        self.point_A = point_A
        self.point_B = point_B
        self.point_C = point_C

    def get_plane_equation(self):
        """
        Returns the plane equation constants for the plane that contains points
        A, B and C.
        Plane equation: a*(x-xo) + b*(y-yo) + c*(z-zo) = 0
        """
        vector_AB = self.point_B - self.point_A
        vector_BC = self.point_C - self.point_B
        normal_vector = np.cross(vector_AB, vector_BC)
        def plane(x, y):
            a = normal_vector[0]
            b = normal_vector[1]
            c = normal_vector[2]
            xo = self.point_A.x
            yo = self.point_A.y
            zo = self.point_A.z
            return ((-a*(x-xo)-b*(y-yo))/c)+zo
        return plane

    def get_volume(self):
        """
        Returns the volume from the polyhedron generated by triangle ABC and 
        the XY plane
        """
        # RESUME HERE after implenting unit test for get_plane_equation
        # The below code on get_volume has not yet been tested

        # Define how to compute a double integral
        def compute_double_integral(line_from_equation,
                                    line_to_equation,
                                    outer_limit_from,
                                    outer_limit_to):
            if ((line_from_equation is None) or (line_to_equation is None)):
                return 0.0, 0.0 # vertical line
            volume, error = integrate.dblquad(self.get_plane_equation,
                                              outer_limit_from,
                                              outer_limit_to,
                                              line_from_equation,
                                              line_to_equation)
            return volume, error

        # Instantiate lines
        lineAB = Line2D(self.point_A, self.point_B)
        lineBC = Line2D(self.point_B, self.point_C)
        lineAC = Line2D(self.point_A, self.point_C)

        # Compute double integral 1:
        volume1, error1 = compute_double_integral(lineAB.get_line_equation(),
                                                  lineAC.get_line_equation(),
                                                  self.point_A.x,
                                                  self.point_B.x)
        # Compute double integral 2:
        volume2, error2 = compute_double_integral(lineAC.get_line_equation(),
                                                  lineBC.get_line_equation(),
                                                  self.point_B.x,
                                                  self.point_C.x)

        # Sum and return
        total_volume = abs(volume1) + abs(volume2)
        total_error = abs(error1) + abs(error2)
        return total_volume, total_error

class TriangularMesh():

    def __init__(self, point_cloud):
        """
        Arguments:
        point_cloud: a pandas dataframe containing x, y, z, elevation
        """
        # This is where we'll say hi to our old friend Delaunay
        pass